---
title: "Setup to connect Local --- Github"
author: "HRM"
date: 19 Sep 2025
date-format: "MMMM DD, YYYY"
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    smooth-scroll: true

    # Code formatting
    code-copy: true
    code-fold: show
    code-line-numbers: true
    highlight-style: dracula
---

# Two Step Only

- **Git** : Locally you need to setup your github username and email
- **Github** : Generate an SSH key and add the public key to your's github account.

## Local git config

- Make account in github.com and copy username and email  
- Open **Terminal** (Linux/Mac) or **PowerShell/GitBash** (Windows).  

```bash
git config --global user.name "Your Github UserName"
git config --global user.email "your_github_email@example.com"
```

## SSH Key Setup

1. Open **Terminal** (Linux/Mac) or **PowerShell/GitBash** (Windows).
2. Run:

   ```bash
   ssh-keygen
   ```

   Press **Enter** through the prompts.
3. This generates two files, e.g., `id_ed25519` (private) and `id_ed25519.pub` (public), usually in(exact path will be present in output of command ssh-keygen):

   ```
   /home/username/.ssh/
   ```
4. Open `id_ed25519.pub`, copy its contents, and add it to your GitHub:

   * **Settings → Access → SSH and GPG Keys → New SSH Key**
   * Select **Authentication Key** as the type.


So now you are ready to push your code on your github account

## SSH - A New Authentication Way

- SSH (Secure Shell) enables secure communication between a client (your machine) and a server (e.g., GitHub).
- It uses **public-key cryptography** consisting of two keys:
    - **Private key**: stays secure on your local machine.
    - **Public key**: shared with the server.

**Authentication process:**

1. The client initiates an SSH connection.
2. The server checks if the client’s public key is authorized.
3. The server creates a challenge (encrypted message) using the stored public key.
4. The client must decrypt it with its private key and return the correct response.
5. If valid, the server confirms the client’s identity.
6. A secure encrypted channel is then established for further communication.

**Key properties:**

- No password is transmitted.
- Only the holder of the private key can authenticate.
- Protects against brute-force and interception attacks.

***