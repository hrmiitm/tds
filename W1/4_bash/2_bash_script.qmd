---
title: "Linux - Bash Scripting"
author: "HRM"
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    smooth-scroll: true

    # Code formatting
    code-copy: true
    code-fold: show
    code-line-numbers: true
    highlight-style: dracula
---


### Variables

Variables store data and don't require type declaration. Use `$` to access variable values.

```bash
# Variable assignment (no spaces around =)
name="John"
age=25
path="/home/user"

# Access variables
echo $name
echo ${name}  # preferred for clarity
```


### Data Types

Bash treats everything as strings by default, but supports:

```bash
# String
message="Hello World"

# Integer (for arithmetic)
num1=10
num2=20
result=$((num1 + num2))

# Array
fruits=("apple" "banana" "cherry")
echo ${fruits[0]}  # access first element
echo ${fruits[@]}  # all elements
echo ${#fruits[@]} # array length
```


### Conditionals

Use `if-then-else` for decision making:

```bash
# Basic if statement
if [ $age -gt 18 ]; then
    echo "Adult"
elif [ $age -eq 18 ]; then
    echo "Just turned adult"
else
    echo "Minor"
fi

# String comparison
if [ "$name" = "John" ]; then
    echo "Hello John!"
fi

# File checks
if [ -f "file.txt" ]; then
    echo "File exists"
fi
```

**Common operators:**

- `-eq` equal, `-ne` not equal
- `-gt` greater than, `-lt` less than
- `-f` file exists, `-d` directory exists


### Loops

#### For Loop

```bash
# Loop through range
for i in {1..5}; do
    echo "Number: $i"
done

# Loop through array
for fruit in "${fruits[@]}"; do
    echo "Fruit: $fruit"
done

# Loop through files
for file in *.txt; do
    echo "Processing: $file"
done
```


#### While Loop

```bash
counter=1
while [ $counter -le 5 ]; do
    echo "Count: $counter"
    counter=$((counter + 1))
done
```


### Text File Handling

#### Reading Files

```bash
# Read line by line
while IFS= read -r line; do
    echo "Line: $line"
done < "input.txt"

# Read entire file
content=$(cat "file.txt")
```


#### Writing Files

```bash
# Overwrite file
echo "Hello" > output.txt

# Append to file
echo "World" >> output.txt

# Write multiple lines
cat << EOF > config.txt
Setting1=value1
Setting2=value2
EOF
```


#### Text Processing

```bash
# Search in file
grep "pattern" file.txt

# Replace text
sed 's/old/new/g' file.txt

# Count lines
wc -l file.txt

# Extract columns
awk '{print $1}' file.txt
```


### Functions

```bash
function greet() {
    echo "Hello $1!"
}

# Call function
greet "Alice"
```


### Command Line Arguments

```bash
# Access arguments
echo "Script name: $0"
echo "First argument: $1"
echo "All arguments: $@"
echo "Number of arguments: $#"
```


***

### Examples

#### Example 1: Basic System Info Script

```bash
#!/bin/bash
echo "=== System Information ==="
echo "Current user: $(whoami)"
echo "Current directory: $(pwd)"
echo "Date: $(date)"
echo "Disk usage:"
df -h | head -5
```


#### Example 2: File Processor

```bash
#!/bin/bash
input_file="data.txt"
output_file="processed.txt"

if [ -f "$input_file" ]; then
    echo "Processing $input_file..."
    
    # Count lines and words
    lines=$(wc -l < "$input_file")
    words=$(wc -w < "$input_file")
    
    echo "File Stats:" > "$output_file"
    echo "Lines: $lines" >> "$output_file"
    echo "Words: $words" >> "$output_file"
    echo "Content:" >> "$output_file"
    cat "$input_file" >> "$output_file"
    
    echo "Processing complete! Check $output_file"
else
    echo "Error: $input_file not found!"
fi
```


#### Example 3: Log File Analyzer

```bash
#!/bin/bash
log_file="/var/log/syslog"

echo "=== Log Analysis ==="
echo "Total lines: $(wc -l < "$log_file")"
echo "Error count: $(grep -c "error" "$log_file")"
echo "Warning count: $(grep -c "warning" "$log_file")"

# Recent errors
echo "Recent errors:"
grep "error" "$log_file" | tail -5
```


### Video Tutorials

- [Linux Playlist](https://www.youtube.com/embed/videoseries?list=PLZ2ps__7DhBajgl-4et7X2BjOIObqlp81){target="_blank"} 

- {{< video https://www.youtube.com/embed/videoseries?list=PLZ2ps__7DhBajgl-4et7X2BjOIObqlp81 >}}